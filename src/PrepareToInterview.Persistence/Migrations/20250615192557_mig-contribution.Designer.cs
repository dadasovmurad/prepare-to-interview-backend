// <auto-generated />
using System;
using System.Text.Json.Nodes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrepareToInterview.Persistence.Contexts;

#nullable disable

namespace PrepareToInterview.Persistence.Migrations
{
    [DbContext(typeof(PrepareToInterviewAPIDbContext))]
    [Migration("20250615192557_mig-contribution")]
    partial class migcontribution
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_answer");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answer_question_id");

                    b.ToTable("answer", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconName")
                        .HasColumnType("text")
                        .HasColumnName("icon_name");

                    b.Property<string>("Iconurl")
                        .HasColumnType("text")
                        .HasColumnName("iconurl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_category_parent_id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_comment_question_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Contribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difficulty");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_title");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_category_name");

                    b.Property<JsonArray>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_contribution");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_contribution_user_id");

                    b.ToTable("contribution", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difficulty");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_question_category_id");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.QuestionTag", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("TagID")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("QuestionID", "TagID")
                        .HasName("pk_question_tag");

                    b.HasIndex("TagID")
                        .HasDatabaseName("ix_question_tag_tag_id");

                    b.ToTable("question_tag", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tag");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<byte[]>("PassKeyHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("pass_key_hash");

                    b.Property<string>("PersonalUrl")
                        .HasColumnType("text")
                        .HasColumnName("personal_url");

                    b.Property<string>("PlainKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plain_key");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("PassKeyHash")
                        .IsUnique()
                        .HasDatabaseName("ix_user_pass_key_hash");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Answer", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Category", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_category_category_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Comment", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.User", "User")
                        .WithMany("Contributions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contribution_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Question", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.QuestionTag", b =>
                {
                    b.HasOne("PrepareToInterview.Domain.Entities.Question", "Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_question_question_id");

                    b.HasOne("PrepareToInterview.Domain.Entities.Tag", "Tag")
                        .WithMany("QuestionTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_tag_tag_id");

                    b.Navigation("Question");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Comments");

                    b.Navigation("QuestionTags");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.Tag", b =>
                {
                    b.Navigation("QuestionTags");
                });

            modelBuilder.Entity("PrepareToInterview.Domain.Entities.User", b =>
                {
                    b.Navigation("Contributions");
                });
#pragma warning restore 612, 618
        }
    }
}
